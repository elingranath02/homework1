Homework 1

The 8 queens problem was firstly solved sequentially. The code included one recursive method and a scan method that checked if
the queen placements were valid. The recursive method considered all possible combinations of queen placements by going from the
top to the bottom. This meant that the diagonal and vertical scans only included the rows above the considered queen placement.
Later, the algorithm was parallelized by adding multiple threads. A pipeline was created with several worker threads. 
One main thread was placing the queens and the others checked if the placement was correct. One thread controlled
the upper left diagonal, another the upper right diagonal and one thread checked vertically above the possible queen placement.
When timing the execution, the runtime did not improve and was instead increased by a lot. Another more effective way 
of parallelizing the code was to have one working thread per column in the board.
Since the threads could run independently and in parallel if they had their own boards, one thread could generate all of the results when
the first queen was placed on "a1" and another thread could generate the results when the first queen was placed on "b1" and so on.
This resulted in the need of using mutexes for locking the variable keeping track of the number of solutions. 

When using the same amount of threads as columns/rows/queens to be placed, the execution time was improved a lot. 
For 8 queens, it was possible to see that the difference between the parallelized and the sequential was a little bit more than twice as
much for the sequential. When increasing to 9 queens, it was possible to see that the difference between the exectuion times was even 
larger. It was almost three times as large for the sequential compared to the time for the parallelized one. Same thing can be observed 
when increasing the number of queens even more and the speedup is clearly noticable (which can be seen in the table below). 
The conclusion is therefor that the execution time is increasing a lot when using different threads instead of generating the solutions
after each other in a sequential program. It was even poissible to see how efficient the parallelized program was compared to the 
sequential for multiple number of queens. 


-------------------------- Benchmarks --------------------------
        Sequential                Parallelized N threads              

Value of N | Runtime (ms)      Value of N | Runtime (ms)           
-----------------------       ---------------------------------   
    8      |    678                8       |       302             
-----------------------       ---------------------------------    
    9      |    2623               9       |       750             
-----------------------       ---------------------------------    
   10      |    11912              10      |      2580          
-----------------------       ---------------------------------    
   11      |    62726              11      |     12274         
-----------------------       ---------------------------------    
   12      |   363025             12       |     68690
-----------------------------------------------------------------
The avarage time of 100 executions

